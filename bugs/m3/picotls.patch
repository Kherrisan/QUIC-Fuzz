diff --git a/lib/picotls.c b/lib/picotls.c
index 6c86295..67db12e 100644
--- a/lib/picotls.c
+++ b/lib/picotls.c
@@ -1631,6 +1631,26 @@ static int setup_traffic_protection(ptls_t *tls, int is_enc, const char *secret_
 
     ctx->epoch = epoch;
 
+    //  ADDED HERE to hardcode the handshake keys
+    uint8_t serverHandshakeTrafficSecret[PTLS_MAX_DIGEST_SIZE] = {0x87, 0xbf, 0xf5, 0x41, 0x83, 0x10, 0x23, 0x8f, 
+                                                                  0xe4, 0xff, 0x87, 0x57, 0x26, 0x20, 0xbb, 0x50, 
+                                                                  0x4d, 0x79, 0x11, 0x1e, 0x54, 0x54, 0x4f, 0x37, 
+                                                                  0x5d, 0x0d, 0xee, 0x58, 0x34, 0xee, 0x1f, 0x96};
+    
+    //  ADDED HERE to hardcode the 1-RTT keys
+    uint8_t serverTrafficSecret0[PTLS_MAX_DIGEST_SIZE] = {0x2b, 0x4e, 0x6d, 0xd9, 0xdc, 0xa8, 0x1e, 0x8b, 
+                                                         0xf6, 0xc4, 0xb3, 0x7b, 0x48, 0x9a, 0x97, 0x02,
+                                                         0xeb, 0x5c, 0xd1, 0xab, 0x20, 0x09, 0xcd, 0xad, 
+                                                         0x50, 0x0d, 0x09, 0xec, 0xf9, 0x22, 0x81, 0x09};
+
+    //  ADDED HERE
+    if(epoch == 2){
+        memcpy(ctx->secret, serverHandshakeTrafficSecret, PTLS_MAX_DIGEST_SIZE);
+    }else if(epoch == 3){
+        memcpy(ctx->secret, serverTrafficSecret0, PTLS_MAX_DIGEST_SIZE);
+    }
+    //  ADDED END
+
     log_secret(tls, log_labels[ptls_is_server(tls) == is_enc][epoch],
                ptls_iovec_init(ctx->secret, tls->key_schedule->hashes[0].algo->digest_size));
 
@@ -1811,16 +1831,22 @@ static int calc_verify_data(void *output, ptls_key_schedule_t *sched, const void
 
 static int verify_finished(ptls_t *tls, ptls_iovec_t message)
 {
-    uint8_t verify_data[PTLS_MAX_DIGEST_SIZE];
-    int ret;
+    //  ADDED HERE: use this hardcode verify_data
+    // uint8_t verify_data[PTLS_MAX_DIGEST_SIZE];
+    // int ret;
+    uint8_t verify_data[PTLS_MAX_DIGEST_SIZE] = {0x86, 0x97, 0x28, 0xf2, 0x83, 0x05, 0x98, 0x0c, 0x69, 0x38, 0x53, 0x23, 0x75, 0xd1, 0xe7, 0xa2, 0xeb, 0x34, 0x50, 0x33, 0xc2, 0x1e, 0x21, 0x5a, 0xa7, 0x92, 0x0c, 0x53, 0xad, 0xf8, 0x2a, 0x96};
+    int ret = 0; //  EDITED HERE, set this to 0;
+    //  ADDED END
 
     if (PTLS_HANDSHAKE_HEADER_SIZE + tls->key_schedule->hashes[0].algo->digest_size != message.len) {
         ret = PTLS_ALERT_DECODE_ERROR;
         goto Exit;
     }
 
-    if ((ret = calc_verify_data(verify_data, tls->key_schedule, tls->traffic_protection.dec.secret)) != 0)
-        goto Exit;
+    //  ADDED HERE: disable this and use hardcode verify_data above.
+    // if ((ret = calc_verify_data(verify_data, tls->key_schedule, tls->traffic_protection.dec.secret)) != 0)
+    //     goto Exit;
+    //  ADDED END
     if (!ptls_mem_equal(message.base + PTLS_HANDSHAKE_HEADER_SIZE, verify_data, tls->key_schedule->hashes[0].algo->digest_size)) {
         ret = PTLS_ALERT_HANDSHAKE_FAILURE;
         goto Exit;
